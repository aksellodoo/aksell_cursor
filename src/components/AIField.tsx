import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Sparkles, Check, X, Loader2, Info } from 'lucide-react';
import { useAISuggest } from '@/hooks/useAISuggest';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { RichTextEditor } from '@/components/ui/rich-text-editor';

interface AIFieldProps {
  field: {
    id: string;
    label: string;
    placeholder?: string;
    required?: boolean;
    aiConfig: {
      sourceFields: string[];
      task: 'summarize' | 'classify' | 'extract' | 'correct' | 'generate';
      instructions: string;
      outputType: 'text' | 'json';
      trigger: 'onClick' | 'onBlur';
      showToUser?: boolean;
      display?: 'singleline' | 'multiline' | 'richtext';
    };
  };
  value: string;
  onChange: (value: string) => void;
  formData: Record<string, any>;
  error?: string;
}

export const AIField: React.FC<AIFieldProps> = ({ 
  field, 
  value, 
  onChange, 
  formData, 
  error 
}) => {
  const { getSuggestion, isLoading, lastSuggestion, lastConfidence, clearSuggestion } = useAISuggest();
  const [showSuggestion, setShowSuggestion] = useState(false);
  const [pendingSuggestion, setPendingSuggestion] = useState<string | null>(null);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  const handleGetSuggestion = async () => {
    // Get source values from form data
    const sourceValues: Record<string, any> = {};
    field.aiConfig.sourceFields.forEach(fieldId => {
      if (formData[fieldId]) {
        sourceValues[fieldId] = formData[fieldId];
      }
    });

    if (Object.keys(sourceValues).length === 0) {
      return;
    }

    const result = await getSuggestion({
      sourceValues,
      task: field.aiConfig.task,
      instructions: field.aiConfig.instructions,
      outputType: field.aiConfig.outputType,
    });

    if (result) {
      setPendingSuggestion(result.suggestion);
      setShowSuggestion(true);
    }
  };

  const handleAcceptSuggestion = () => {
    if (pendingSuggestion) {
      onChange(pendingSuggestion);
      setShowSuggestion(false);
      setPendingSuggestion(null);
      clearSuggestion();
    }
  };

  const handleRejectSuggestion = () => {
    setShowSuggestion(false);
    setPendingSuggestion(null);
    clearSuggestion();
  };

  const canGenerateSuggestion = field.aiConfig.sourceFields.some(fieldId => 
    formData[fieldId] && String(formData[fieldId]).trim()
  );

  const renderInputField = () => {
    const display = field.aiConfig.display || 'singleline';
    const inputClassName = `${display !== 'singleline' ? '' : 'pr-12'} ${error ? 'border-destructive' : ''}`;

    switch (display) {
      case 'multiline':
        return (
          <Textarea
            id={field.id}
            placeholder={field.placeholder}
            value={value}
            onChange={(e) => onChange(e.target.value)}
            className={`min-h-24 resize-y ${inputClassName}`}
          />
        );
      
      case 'richtext':
        return (
          <RichTextEditor
            value={value}
            onChange={onChange}
            placeholder={field.placeholder || 'Digite seu texto aqui...'}
            showToolbar={true}
            minHeight={200}
          />
        );
      
      default: // singleline
        return (
          <Input
            id={field.id}
            type="text"
            placeholder={field.placeholder}
            value={value}
            onChange={(e) => onChange(e.target.value)}
            className={inputClassName}
          />
        );
    }
  };

  // Auto-generate suggestion for hidden fields
  useEffect(() => {
    if (field.aiConfig.showToUser === false && canGenerateSuggestion && !value && !hasAutoGenerated && !isLoading) {
      handleGetSuggestion().then(() => {
        setHasAutoGenerated(true);
      });
    }
  }, [canGenerateSuggestion, value, hasAutoGenerated, isLoading, field.aiConfig.showToUser]);

  // Auto-accept suggestions for hidden fields
  useEffect(() => {
    if (field.aiConfig.showToUser === false && pendingSuggestion) {
      onChange(pendingSuggestion);
      setShowSuggestion(false);
      setPendingSuggestion(null);
      clearSuggestion();
    }
  }, [pendingSuggestion, field.aiConfig.showToUser, onChange, clearSuggestion]);

  // Don't render UI for hidden fields
  if (field.aiConfig.showToUser === false) {
    return null;
  }

  return (
    <div className="space-y-3">
      <Label htmlFor={field.id} className="text-sm font-medium">
        {field.label}
        {field.required && <span className="text-destructive ml-1">*</span>}
      </Label>
      
      <div className="relative">
        {renderInputField()}
        
        <Button
          type="button"
          size="sm"
          variant="ghost"
          onClick={handleGetSuggestion}
          disabled={isLoading || !canGenerateSuggestion}
          className={`absolute ${field.aiConfig.display === 'richtext' ? 'right-1 top-1' : 'right-1 top-1/2 -translate-y-1/2'} h-8 w-8 p-0 hover:bg-primary/10 z-10`}
          title="Sugerir com IA"
        >
          {isLoading ? (
            <Loader2 className="h-4 w-4 animate-spin text-primary" />
          ) : (
            <Sparkles className="h-4 w-4 text-primary" />
          )}
        </Button>
      </div>

      {!canGenerateSuggestion && (
        <Alert className="border-amber-200 bg-amber-50">
          <Info className="h-4 w-4 text-amber-600" />
          <AlertDescription className="text-amber-800 text-sm">
            Preencha os campos de origem para gerar sugestões.
          </AlertDescription>
        </Alert>
      )}

      {showSuggestion && pendingSuggestion && (
        <div className="p-3 bg-primary/5 border border-primary/20 rounded-lg space-y-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Sparkles className="h-4 w-4 text-primary" />
              <span className="text-sm font-medium">Sugestão da IA</span>
              {lastConfidence && (
                <Badge variant="secondary" className="text-xs">
                  {lastConfidence}%
                </Badge>
              )}
            </div>
          </div>
          
          <div className="bg-background p-3 rounded border text-sm">
            {pendingSuggestion}
          </div>
          
          <div className="flex gap-2">
            <Button
              size="sm"
              onClick={handleAcceptSuggestion}
              className="flex items-center gap-1"
            >
              <Check className="h-3 w-3" />
              Aceitar
            </Button>
            <Button
              size="sm"
              variant="outline"
              onClick={handleRejectSuggestion}
              className="flex items-center gap-1"
            >
              <X className="h-3 w-3" />
              Descartar
            </Button>
          </div>
        </div>
      )}

      <div className="text-xs text-muted-foreground">
        <Info className="h-3 w-3 inline mr-1" />
        LGPD: Este campo usa IA (OpenAI). Os dados aqui mostrados podem estar errados e podem ser alterados manualmente pelo usuário. Fique a vontade em alterar caso julgue apropriado.
      </div>

      {error && <p className="text-sm text-destructive">{error}</p>}
    </div>
  );
};